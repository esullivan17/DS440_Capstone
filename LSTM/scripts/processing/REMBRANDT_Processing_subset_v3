# %%
'''
Preprocesses DICOM images for 51 patients, grouped by tumor grade (0, 1, 2).
For each patient:
- Reads their images
- Applies rescaling and transformation
- Saves images as PNGs for inspection
- Stores tensors, rel_path, and grade in Patient_Data dictionary
- Saves Patient_Data as patient_data.pt in working directory
'''

import pydicom
import os
import numpy as np
import pandas as pd
import torch
from PIL import Image
from torchvision import transforms


csv_path = "C:/Users/esul_/Offline Documents/DS 440/REMBRANDT/clinical_processed.csv"  # <- Update this path
df = pd.read_csv(csv_path)


# Patient ID â†’ Grade (already 0, 1, 2 in Excel)
patient_grades = dict(zip(df["Sample"], df["Grade"]))

# Target patient list from Excel
target_folders = set(df["Sample"])


save_dir = "C:/Users/esul_/Offline Documents/DS 440/REMBRANDT/images_subset"
os.makedirs(save_dir, exist_ok=True)

# === Transform pipeline (no normalization) ===
TransformImages = transforms.Compose([
    transforms.Grayscale(num_output_channels=3),
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

def Load_DCM_Files(base_path):
    patient_data = {}
    total_images_saved = 0

    print(f"Starting directory walk at: {base_path}")
    for root, dirs, files in os.walk(base_path):
        matched_subject = next((folder for folder in target_folders if folder in root), None)
        if matched_subject is None:
            continue

        for file in files:
            if not file.endswith(".dcm"):
                continue

            file_path = os.path.join(root, file)
            try:
                # Load and rescale pixel array
                DCMData = pydicom.dcmread(file_path)
                pixel_array = DCMData.pixel_array.astype(np.float32)

                slope = getattr(DCMData, 'RescaleSlope', 1)
                intercept = getattr(DCMData, 'RescaleIntercept', 0)
                pixel_array = pixel_array * slope + intercept

                pixel_array -= np.min(pixel_array)
                if np.max(pixel_array) != 0:
                    pixel_array /= np.max(pixel_array)
                pixel_array *= 255.0
                pixel_array = pixel_array.astype(np.uint8)

                image = Image.fromarray(pixel_array)

                # Relative path (starting from REMBRANDT/)
                rel_path = os.path.relpath(file_path, base_path)

                # Flatten path for PNG saving
                rel_path_flat = rel_path.replace(os.sep, "_").replace(".dcm", ".png")
                save_path = os.path.join(save_dir, rel_path_flat)
                image.save(save_path)
                total_images_saved += 1

                # Transform and record tensor with grade
                transformed_image = TransformImages(image)
                grade = patient_grades.get(matched_subject)

                if matched_subject not in patient_data:
                    patient_data[matched_subject] = []

                patient_data[matched_subject].append({
                    "tensor": transformed_image,
                    "rel_path": rel_path,
                    "grade": grade
                })

                print(f"Saved & tagged: {rel_path_flat} (grade {grade})")
            except Exception as e:
                print(f"Error reading {file_path}: {e}")

    print("\n--- Summary ---")
    print(f"Total images saved: {total_images_saved}")
    print(f"Patients processed: {len(patient_data)}")
    return patient_data


Directory = "C:/Users/esul_/Offline Documents/DS 440/REMBRANDT/images/manifest-tXudPFfp4347295727406092090/REMBRANDT"

# === Run the loader ===
Patient_Data = Load_DCM_Files(Directory)

# === Save the tensor dictionary ===
torch.save(Patient_Data, "patient_data.pt")
print("Patient_Data saved to: patient_data.pt")
